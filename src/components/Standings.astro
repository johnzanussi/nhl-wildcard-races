---
import { getWildCardStandings } from '@/data/Standings.ts';
import TeamCard from '@/components/Team/Card.astro';
import Divider from '@/components/Divider.astro';
import ThemeToggle from '@/components/ThemeToggle.astro';


const standings = await getWildCardStandings();
---

<div class="flex my-4 lg:my-8 items-center justify-between">

    <div
        class="tabs tabs-lg tabs-box md:w-1/2"
        role="tablist"
    >

        {Object.entries(standings).map(([, conf]) => {

            const label = conf.label;

            return (
                <a
                    role="tab"
                    class="tab grow"
                    href={`#${label.toLowerCase()}`}
                    data-tab={`#tab-${label.toLowerCase()}`}>
                    {label}
                </a>
            );

        })}

    </div>

    <div>
        <label class="label text-sm">
            <input
                name="toggle-playoff-teams"
                type="checkbox"
                class="toggle toggle-sm"
            />
            Show Playoff Teams
        </label>
    </div>


    <ThemeToggle />

</div>

{Object.entries(standings).map(([, conf]) => {

    let teamCount = 0;

    return (

        <div
            class="tab-panel w-full overflow-x-auto"
            id={`tab-${conf.label.toLowerCase()}`}
            data-tab={conf.label.toLowerCase()}
        >
            {conf.teams.map((team) => {
                teamCount++;

                return (
                    <>
                        <TeamCard team={team} />

                        {teamCount === 6 && (
                            <Divider class="divider-accent playoff-team">
                                Wild Card
                            </Divider>
                        )}

                        {teamCount === 8 && (
                            <Divider class="divider-error">
                                No Playoffs
                            </Divider>
                        )}

                    </>
                );
            })}
        </div>
    );

})}

<script>
const playoffToggle = document.querySelector('input[name="toggle-playoff-teams"]') as HTMLInputElement;
const PLAYOFF_TOGGLE_KEY = 'show-playoff-teams';

// Sync playoff toggle with data attribute
if (playoffToggle) {
    playoffToggle.checked = document.documentElement.getAttribute('data-show-playoffs') === 'true';
}

// Update on change
playoffToggle?.addEventListener('change', (e: Event) => {
    const target = e.currentTarget as HTMLInputElement;
    const isChecked = target.checked;

    localStorage.setItem(PLAYOFF_TOGGLE_KEY, isChecked.toString());

    if (isChecked) {
        document.documentElement.setAttribute('data-show-playoffs', 'true');
    } else {
        document.documentElement.removeAttribute('data-show-playoffs');
    }
});

const scrollToLastGame = () => {
    const activeTab = document.documentElement.getAttribute('data-active-tab') || 'east';
    const panel = document.querySelector(`.tab-panel[data-tab="${activeTab}"]`);

    if (panel) {
        const schedules = panel.querySelectorAll('.schedule');
        const firstSchedule = schedules[0];

        if (firstSchedule) {
            const results = firstSchedule.querySelectorAll('.result-played');
            const lastGame = results[results.length - 1];

            if (lastGame) {
                const leftPos = lastGame.getBoundingClientRect().left + panel.scrollLeft;
                const scrollPos = leftPos - (document.documentElement.clientWidth / 2);

                panel.scroll({
                    left: scrollPos,
                });
            }
        }
    }
};

(() => {
    const tabs = document.querySelectorAll('a[role="tab"]');

    tabs.forEach(tab => {
        tab.addEventListener('click', (e) => {
            e.preventDefault();

            const tabName = tab.getAttribute('href')?.substring(1) || 'east';

            // Update active states
            document.querySelectorAll('a[role="tab"].tab-active')
                .forEach(el => el.classList.remove('tab-active'));
            tab.classList.add('tab-active');

            // Update data attribute to show correct tab
            document.documentElement.setAttribute('data-active-tab', tabName);

            // Save to localStorage
            localStorage.setItem('active-tab', tabName);

            // Scroll to last game
            scrollToLastGame();
        });
    });

    // Initialize from data attribute (already set in head)
    const activeTab = document.documentElement.getAttribute('data-active-tab') || 'east';
    (document.querySelector(`a.tab[href="#${activeTab}"]`) as HTMLElement)?.click();
})();

scrollToLastGame();
</script>