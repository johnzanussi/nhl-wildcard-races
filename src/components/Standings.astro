---
import { getWildCardStandings } from '@/data/Standings.ts';
import TeamCard from '@/components/Team/Card.astro';
import Divider from '@/components/Divider.astro';
import ThemeToggle from '@/components/ThemeToggle.astro';


const standings = await getWildCardStandings();
---

<div class="flex my-4 lg:my-8 items-center justify-between">

    <div
        class="tabs tabs-lg tabs-box md:w-1/2"
        role="tablist"
    >

        {Object.entries(standings).map(([, conf]) => {

            const label = conf.label;

            return (
                <a
                    role="tab"
                    class="tab grow"
                    href={`#${label.toLowerCase()}`}
                    data-tab={`#tab-${label.toLowerCase()}`}>
                    {label}
                </a>
            );

        })}

    </div>

    <div>
        <label class="label text-sm">
            <input
                name="toggle-playoff-teams"
                type="checkbox"
                class="toggle toggle-sm"
            />
            Show Playoff Teams
        </label>
    </div>

    <ThemeToggle />


</div>

{Object.entries(standings).map(([, conf]) => {

    let teamCount = 0;

    return (

        <div
            class="tab-panel w-full overflow-x-auto"
            id={`tab-${conf.label.toLowerCase()}`}
        >
            {conf.teams.map((team) => {
                teamCount++;

                return (
                    <>
                        <TeamCard team={team} />

                        {teamCount === 6 && (
                            <Divider class="divider-accent playoff-team hidden">
                                Wild Card
                            </Divider>
                        )}

                        {teamCount === 8 && (
                            <Divider class="divider-error">
                                No Playoffs
                            </Divider>
                        )}

                    </>
                );
            })}
        </div>
    );

})}

<script>
const playoffTeamElements = document.querySelectorAll('.playoff-team');

document.querySelector('input[name="toggle-playoff-teams"]')?.addEventListener('change', (e: Event) => {
    const target = e.currentTarget as HTMLInputElement;
    playoffTeamElements.forEach(el => el.classList.toggle('hidden', !target?.checked));
});

const scrollToLastGame = () => {

    const panel = document.querySelector('.tab-panel:not(.hidden)');

    if (panel) {
        const schedules = panel.querySelectorAll('.schedule');
        const firstSchedule = schedules[0];

        if (firstSchedule) {

            const results = firstSchedule.querySelectorAll('.result-played');
            const lastGame = results[results.length - 1];

            if (lastGame) {

                const leftPos = lastGame.getBoundingClientRect().left + panel.scrollLeft;
                const scrollPos = leftPos - (document.documentElement.clientWidth / 2);

                panel.scroll({
                    left: scrollPos,
                });
            }
        }

    }
    };

(() => {

    const tabs = document.querySelectorAll('a[role="tab"]');

    tabs.forEach(tab => {

        tab.addEventListener('click', () => {

            document
                .querySelectorAll('a[role="tab"].tab-active')
                .forEach(el => el.classList.remove('tab-active'));

            tab.classList.add('tab-active');

            document
                .querySelectorAll('.tab-panel')
                .forEach(el => el.classList.add('hidden'));

            if (tab instanceof HTMLElement && tab.dataset.tab) {
                document
                    .querySelector(tab.dataset.tab)
                    ?.classList.remove('hidden');
                scrollToLastGame();
            }

        });
    });

    const defaultHash = window.location.hash !== '' ? window.location.hash : '#east';
    (document.querySelector(`a.tab[href="${defaultHash}"]`) as HTMLElement)?.click();

})();

scrollToLastGame();
</script>